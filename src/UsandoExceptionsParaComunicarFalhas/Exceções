EXCEPTION E RUNTIMEEXCEPTION:

    Quando você quer trabalhar com excessões você deve usar as classes Exception ou RuntimeException
    e outras subclasses delas.Uma subclasse que herda de Exception é uma classe do tipo Checked exeption, já
    a que herda do RuntimeException é do tipo Unchecked exeption.

----------------------------------------------------

STACK TRACE:

    O texto vermelho quanto aparece um erro é chamado de stack trace (rastreio de pilha).
    Stack, porque quando chamamos metodos, fazemos um empilhamento em camadas.
        - Quando entramos em um novo metodo, basicamente nós empilhamos as informações dele
        em cima do metodo que estamos executando.

        - Quando termina você empilha esse metodo, sai dele e continua executando o metodo
        anterior da parte onde você parou. Funciona como uma pilha de pratos.

    A Stack Trace retorna a sequência do que estava acontecendo quando o problema aconteceu.
        - A primeira linha mostra a parte que deu erro e, em caso de excessões, o nome da excessão.
        - Ela começa de baixo para cima, sendo a última linha o primeiro metodo que estava sendo executado.
    EX:
        Exception in thread "main" java.lang.RuntimeException: Ammount cannot be negative.
            at UsandoExceptionsParaComunicarFalhas.Account2.withdraw(Account2.java:29)
            at Apps.App8.main(App8.java:15)

        Process finished with exit code 1

    O "Process finished with exit code 1" significa que o processo foi finalizado com o erro 1. Se foi 
    finalizado com sucesso ele terminaria com o 0.

----------------------------------------------------

THROWS:

    Enquanto o throw lança e termina o metodo com um comportamento excepcional o throws Exception vai na assinatura
    do metodo e diz que ele pode lançar exceções (não obrigatóriamente).

----------------------------------------------------

CHECKED X UNCHECKED:

    Situações como a de saldo negativo (validação de balance < ammount) as Checked Exceptions são mais interessantes,
    uma vez que ela força a utilização do throws lá em cima do lado do metodo e quem faz a chamada desse metodo tem que
    estar ciente de que alguma excessão pode acontecer, obrigando tratá-la ou propagála, utilizando o throws também.

    Já em situações como o ammount sendo negativo (validação de ammount < 0) ocorre, normalmente, em casos onde outros
    tipos de validação obtiveram erro, podendo ser decorrencia de um bug ao longo do processo. Quando o fato dessa
    excessão acontecer é porque que aconteceu algum erro em algum outro lugar, a melhor opção é i Unchecked Exceptions.

    Resumo:
        Checked Exceptions:
            - Quando você quer obrigar quem chamou tratar. Uma situação que pode acontecer, e se acontecer deve ser
              tratado por quem chamou.

        Unchecked Exceptions:
            - Quando é um bug, que ocorreu e que você não espera que seja tratado, uma vez que ele aconteceu por
              decorrência de um outro problema.